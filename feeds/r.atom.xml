<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Manish Barnwal</title><link href="http://manishbarnwal.github.io/" rel="alternate"></link><link href="http://manishbarnwal.github.io/feeds/r.atom.xml" rel="self"></link><id>http://manishbarnwal.github.io/</id><updated>2016-08-02T07:00:00-03:00</updated><entry><title>When R package is not available across the cluster</title><link href="http://manishbarnwal.github.io/blog/2016/08/02/r_packages_not_in_cluster/" rel="alternate"></link><updated>2016-08-02T07:00:00-03:00</updated><author><name>Manish Barnwal</name></author><id>tag:manishbarnwal.github.io,2016-08-02:blog/2016/08/02/r_packages_not_in_cluster/</id><summary type="html">&lt;p&gt;When deploying codes across the cluster, many a times the reason for the failure of the task is unavailability of a particular package across all the nodes of the cluster. The solution to this is you wait for the open-source team of the cluster to get you install the required packages. The open-source team may not be available at that very instant. What do we do? We wait. Naah!&lt;/p&gt;
&lt;p&gt;Presenting a temporary solution that one of my colleague came up with. I have used this technique and this works smoothly.&lt;/p&gt;
&lt;p&gt;The following are the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the package you require on one of the edge nodes into a local directory(create this local dir first).&lt;/li&gt;
&lt;li&gt;Create a local directory. Let's say our directory name is rPackages
  &lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
  &lt;code class="bash"&gt;mkdir rPackages
  &lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the required package, say 'randomForest' in the directory just created
  &lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
  &lt;code class="r"&gt;install.packages(“package_name”, repos=’repo_name', lib=“dir_location/”)
  &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check if you can load the package from this local directory by using,
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="r"&gt;library(package_name, lib.loc=“dir_location/”)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create zip file of “dir_location” using command
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="bash"&gt;zip -r dir_location.zip dir_location
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add this zip file in your HIVE hql (or anything else) (Don’t forget semicolon)
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="bash"&gt;add file dir_location.zip;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unzip the file inside R script (i.e. Each reducer will have dir_location directory now)
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="bash"&gt;unzip(“dir_location.zip”, overwrite=TRUE)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load the package now
&lt;pre style="font-size:60%; padding:7px; margin:0em;"&gt;
&lt;code class="bash"&gt;library(package_name, lib.loc=”dir_location/“)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And you’re done! Let me know if you need assistance. Remember, you have to build the package where you want to use, because built packages are OS dependent.&lt;/p&gt;</summary><category term="big data"></category><category term="R"></category></entry></feed>